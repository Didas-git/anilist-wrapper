/* eslint-disable @typescript-eslint/naming-convention */
import type { MediaFormat, MediaSeason, MediaSort, MediaStatus, MediaType, MediaSource } from ".";
import type { CountryCode } from "../country-code";
import type { FuzzyDateInt } from "../fuzzy-date";

export const EnumTypes = new Set(["season", "type", "format", "status", "source", "format_not", "status_not"]);

export interface MediaArguments {
    id?: number;
    idMal?: number;
    startDate?: FuzzyDateInt;
    endDate?: FuzzyDateInt;
    season?: MediaSeason;
    seasonYear?: number;
    type?: MediaType;
    format?: MediaFormat;
    status?: MediaStatus;
    episodes?: number;
    duration?: number;
    chapters?: number;
    volumes?: number;
    isAdult?: boolean;
    genre?: string;
    tag?: string;
    minimumTagRank?: number;
    tagCategory?: string;
    onList?: boolean;
    licensedBy?: string;
    licensedById?: number;
    averageScore?: number;
    popularity?: number;
    source?: MediaSource;
    countryOfOrigin?: CountryCode;
    isLicensed?: boolean;
    search?: string;
    id_not?: number;
    id_in?: Array<number>;
    id_not_in?: Array<number>;
    idMal_not?: number;
    idMal_in?: Array<number>;
    idMal_not_in?: Array<number>;
    startDate_greater?: FuzzyDateInt;
    startDate_lesser?: FuzzyDateInt;
    startDate_like?: string;
    endDate_greater?: FuzzyDateInt;
    endDate_lesser?: FuzzyDateInt;
    endDate_like?: string;
    format_in?: Array<MediaFormat>;
    format_not?: MediaFormat;
    format_not_in?: Array<MediaFormat>;
    status_in?: Array<MediaStatus>;
    status_not?: MediaStatus;
    status_not_in?: Array<MediaStatus>;
    episodes_greater?: number;
    episodes_lesser?: number;
    duration_greater?: number;
    duration_lesser?: number;
    chapters_greater?: number;
    chapters_lesser?: number;
    volumes_greater?: number;
    volumes_lesser?: number;
    genre_in?: Array<string>;
    genre_not_in?: Array<string>;
    tag_in?: Array<string>;
    tag_not_in?: Array<string>;
    tagCategory_in?: Array<string>;
    tagCategory_not_in?: Array<string>;
    licensedBy_in?: Array<string>;
    licensedById_in?: Array<number>;
    averageScore_not?: number;
    averageScore_greater?: number;
    averageScore_lesser?: number;
    popularity_not?: number;
    popularity_greater?: number;
    popularity_lesser?: number;
    source_in?: Array<MediaSource>;
    sort?: Array<MediaSort>;
}